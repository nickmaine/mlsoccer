<?

/**
 * Implementation of hook_init()
 */
function mlsoccer_init() {
	drupal_add_css(drupal_get_path('module', 'mlsoccer') . "/css/mlsoccer.css", array('group' => CSS_THEME, 'weight' => 9999));
}

/**
 * Implementation of hook_menu()
 */
function mlsoccer_menu() {
	$items['mlsoccer/standings'] = array(
		'title' => 'Standings',
		'page callback'	=> 'mlsoccer_standings_page',
		'type'	=> MENU_NORMAL_ITEM,
		'access arguments'	=> array('access content'),
		'weight' => -2
	);
	$items['mlsoccer/standings/supporters-shield'] = array(
		'title' => 'Supporters\' Shield Race',
		'page callback'	=> 'mlsoccer_supporters_shield_page',
		'type'	=> MENU_NORMAL_ITEM,
		'access arguments'	=> array('access content'),
		'weight' => -1
	);
	$items['mlsoccer/ajax/standings'] = array(
		'page callback'	=> 'mlsoccer_ajax_standings',
		'type'	=> MENU_CALLBACK,
		'access arguments'	=> array('access content'),
	);
	return $items;
}

/**
 * Implementation of hook_theme()
 */
function mlsoccer_theme($existing, $type, $theme, $path){
  return array(
    'mlsoccer-standings' => array(
	    'template'  => 'theme/mlsoccer-standings',
    ),
    'mlsoccer-supporters-shield' => array(
	    'template'  => 'theme/mlsoccer-supporters-shield',
    )
  );
}

/**
 * Menu callback for the MLS standings page
 * @return html themed standings page
 */
function mlsoccer_standings_page() {
	return theme('mlsoccer-standings');
}

/**
 * Menu callback for the MLS supporters shield page
 * @return html themed supporters shield page
 */
function mlsoccer_supporters_shield_page() {
	return theme('mlsoccer-supporters-shield');
}

/**
 * AJAX callback for standings data
 * @return json data for js datatables
 */
function mlsoccer_ajax_standings() {
	$data = mlsoccer_get_data();
	drupal_json_output($data);
}

/**
 * Get MLS XML data and create an array that can be used by datatables
 * that will be JSON encoded
 * @return array neccesary values to create MLS standings pages
 */
function mlsoccer_get_data() {
	$standing_data = array();

	$data = mlsoccer_get_xml();

	$xml = simplexml_load_string($data);

	$regional_team_standings = $xml->xpath("//TeamStandings");
	foreach($regional_team_standings as $team_standings) {
		foreach($team_standings as $team_standing) {
			$uID = (string)$team_standing->attributes()->TeamRef;
			if (empty($uID)) {
				continue;
			}

			$team_name = $xml->xpath("//Team[@uID='$uID']");

			$standing_data['aaData'][] = array(
				'TeamRef' => $uID,
				'Conference' => (string)$team_standings->Round->Name['id'][0],
				'Club' => (string)$team_name[0]->Name,
				'Against' => intval($team_standing->Standing->Against),
				'AwayFor' => intval($team_standing->Standing->AwayFor),
				'Drawn' => intval($team_standing->Standing->Drawn),
				'For' => intval($team_standing->Standing->For),
				'HomeFor' => intval($team_standing->Standing->HomeFor),
				'Lost' => intval($team_standing->Standing->Lost),
				'Played' => intval($team_standing->Standing->Played),
				'Points' => intval($team_standing->Standing->Points),
				'Position' => intval($team_standing->Standing->Position),
				'Won' => intval($team_standing->Standing->Won),
				'GoalDifference' => intval($team_standing->Standing->For) - intval($team_standing->Standing->Against),
				'HomeGoalDifference' => intval($team_standing->Standing->HomeFor) - intval($team_standing->Standing->HomeAgainst),
				'RoadGoalDifference' => intval($team_standing->Standing->AwayFor) - intval($team_standing->Standing->AwayAgainst),
				'Clinched' => FALSE,
			);
		}
	}

	calcStandings($standing_data);

	return $standing_data;
}

/**
 * Get a locally stored MLS XML data file
 * TODO: load from a dynamic source and/or remove hard coded value
 * and read as a variable_get from an admin setting
 * @return string an XML string
 */
function mlsoccer_get_xml() {
	$data = file_get_contents(drupal_get_path('module', 'mlsoccer') . '/data/srml-98-2012-standings.xml');
	return $data;
}

/**
 * Calculate whether a club will be in the top 5 in points at end of season,
 * if so mark Clinched element as TRUE.
 */

function calcStandings(&$standing_data) {
	$win_points = 3;
	$games_total = 34;

	$east_standings = array();
	$west_standings = array();
	foreach($standing_data['aaData'] as $club_data) {
		$final_points = $club_data['Points'] + (($games_total - $club_data['Played']) * $win_points);
		if ($club_data['Conference'] == "East") {
			$east_standings[$club_data['TeamRef']] = $final_points;
		}
		else {
			$west_standings[$club_data['TeamRef']] = $final_points;
		}
	}

	arsort($east_standings);
	arsort($west_standings);
	$east_standings = array_slice($east_standings, 0, 5);
	$west_standings = array_slice($west_standings, 0, 5);

	foreach($standing_data['aaData'] as $idx => $club_data) {
		if ($club_data['Conference'] == "East" && array_key_exists($club_data['TeamRef'], $east_standings)) {
			$standing_data['aaData'][$idx]['Clinched'] = TRUE;
		}
		else if ($club_data['Conference'] == "West" && array_key_exists($club_data['TeamRef'], $west_standings)) {
			$standing_data['aaData'][$idx]['Clinched'] = TRUE;
		}
	}
}
